{"ast":null,"code":"import _slicedToArray from\"C:/Users/97254/Desktop/ReactJS/FoodOrderApp/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"C:/Users/97254/Desktop/ReactJS/FoodOrderApp/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _objectSpread from\"C:/Users/97254/Desktop/ReactJS/FoodOrderApp/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// import CartContext from \"./cart-context\";\n// import { useReducer } from \"react\";\n// const defaultCartState = {\n//   items: [],\n//   totalAmount: 0,\n// };\n// const cartRducer = (state, action) => {\n//   if (action.type === \"ADD\") {\n//     const updatedTotalAmount =\n//       state.totalAmount + action.item.price * action.item.amount;\n//     const exitingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.item.id\n//     );\n//     const existingCartItem = state.items[exitingCartItemIndex];\n//     let updatedItems;\n//     if (existingCartItem) {\n//       const updatedItem = {\n//         ...existingCartItem,\n//         amount: existingCartItem.amount + action.item.amount,\n//       };\n//       updatedItems = [...state.items];\n//       updatedItems[exitingCartItemIndex] = updatedItem;\n//     } else {\n//       updatedItems = state.items.concat(action.item);\n//     }\n//     return {\n//       items: updatedItems,\n//       totalAmount: updatedTotalAmount,\n//     };\n//   }\n//   if (action.type === \"REMOVE\") {\n//     const exitingCartItemIndex = state.items.findIndex(\n//       (item) => item.id === action.id\n//     );\n//     const existingItem = state.item[exitingCartItemIndex];\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\n//     let updatedItems;\n//     if (existingItem.amount === 1 ){\n//         updatedItems = state.items.filter(item => item.id !== action.id)\n//     }else {\n//         const updatedItem = {...existingItem, amount : existingItem.amount - 1};\n//         updatedItems = [...state.items];\n//         updatedItems[exitingCartItemIndex] = updatedItem;\n//     }\n//     return {\n//         items: updatedItems,\n//         totalAmount: updatedTotalAmount,\n//     }\n//   }\n//   return defaultCartState;\n// };\n// const CartProvider = (props) => {\n//   const [cartState, dispatchCartAction] = useReducer(\n//     cartRducer,\n//     defaultCartState\n//   );\n//   const addItemToCartHandler = (item) => {\n//     dispatchCartAction({ type: \"ADD\", item: item });\n//   };\n//   const removeItemFromCartHandler = (id) => {\n//     dispatchCartAction({ type: \"REMOVE\", id: id });\n//   };\n//   const cartContext = {\n//     items: cartState.items,\n//     totalAmount: cartState.totalAmount,\n//     addItem: addItemToCartHandler,\n//     removeItem: removeItemFromCartHandler,\n//   };\n//   return (\n//     <CartContext.Provider value={cartContext}>\n//       {props.children}\n//     </CartContext.Provider>\n//   );\n// };\n// export default CartProvider;\nimport{useReducer}from\"react\";import CartContext from\"./cart-context\";import{jsx as _jsx}from\"react/jsx-runtime\";var defaultCartState={items:[],totalAmount:0};var cartReducer=function cartReducer(state,action){if(action.type===\"ADD\"){var updatedTotalAmount=state.totalAmount+action.item.price*action.item.amount;var existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.item.id;});var existingCartItem=state.items[existingCartItemIndex];var updatedItems;if(existingCartItem){var updatedItem=_objectSpread(_objectSpread({},existingCartItem),{},{amount:existingCartItem.amount+action.item.amount});updatedItems=_toConsumableArray(state.items);updatedItems[existingCartItemIndex]=updatedItem;}else{updatedItems=state.items.concat(action.item);}return{items:updatedItems,totalAmount:updatedTotalAmount};}if(action.type===\"REMOVE\"){var _existingCartItemIndex=state.items.findIndex(function(item){return item.id===action.id;});var existingItem=state.items[_existingCartItemIndex];var _updatedTotalAmount=state.totalAmount-existingItem.price;var _updatedItems;if(existingItem.amount===1){_updatedItems=state.items.filter(function(item){return item.id!==action.id;});}else{var _updatedItem=_objectSpread(_objectSpread({},existingItem),{},{amount:existingItem.amount-1});_updatedItems=_toConsumableArray(state.items);_updatedItems[_existingCartItemIndex]=_updatedItem;}return{items:_updatedItems,totalAmount:_updatedTotalAmount};}if(action.type===\"CLEAR\"){return defaultCartState;}return defaultCartState;};var CartProvider=function CartProvider(props){var _useReducer=useReducer(cartReducer,defaultCartState),_useReducer2=_slicedToArray(_useReducer,2),cartState=_useReducer2[0],dispatchCartAction=_useReducer2[1];var addItemToCartHandler=function addItemToCartHandler(item){dispatchCartAction({type:\"ADD\",item:item});};var removeItemFromCartHandler=function removeItemFromCartHandler(id){dispatchCartAction({type:\"REMOVE\",id:id});};var clearCartHandler=function clearCartHandler(){dispatchCartAction({type:\"CLEAR\"});};var cartContext={items:cartState.items,totalAmount:cartState.totalAmount,addItem:addItemToCartHandler,removeItem:removeItemFromCartHandler,clearCart:clearCartHandler};return/*#__PURE__*/_jsx(CartContext.Provider,{value:cartContext,children:props.children});};export default CartProvider;","map":{"version":3,"sources":["C:/Users/97254/Desktop/ReactJS/FoodOrderApp/src/store/CartProvider.js"],"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedTotalAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","existingItem","filter","CartProvider","props","cartState","dispatchCartAction","addItemToCartHandler","removeItemFromCartHandler","clearCartHandler","cartContext","addItem","removeItem","clearCart","children"],"mappings":"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","sourcesContent":["// import CartContext from \"./cart-context\";\r\n// import { useReducer } from \"react\";\r\n\r\n// const defaultCartState = {\r\n//   items: [],\r\n//   totalAmount: 0,\r\n// };\r\n\r\n// const cartRducer = (state, action) => {\r\n//   if (action.type === \"ADD\") {\r\n//     const updatedTotalAmount =\r\n//       state.totalAmount + action.item.price * action.item.amount;\r\n//     const exitingCartItemIndex = state.items.findIndex(\r\n//       (item) => item.id === action.item.id\r\n//     );\r\n\r\n//     const existingCartItem = state.items[exitingCartItemIndex];\r\n\r\n//     let updatedItems;\r\n\r\n//     if (existingCartItem) {\r\n//       const updatedItem = {\r\n//         ...existingCartItem,\r\n//         amount: existingCartItem.amount + action.item.amount,\r\n//       };\r\n//       updatedItems = [...state.items];\r\n//       updatedItems[exitingCartItemIndex] = updatedItem;\r\n//     } else {\r\n//       updatedItems = state.items.concat(action.item);\r\n//     }\r\n\r\n//     return {\r\n//       items: updatedItems,\r\n//       totalAmount: updatedTotalAmount,\r\n//     };\r\n//   }\r\n\r\n//   if (action.type === \"REMOVE\") {\r\n//     const exitingCartItemIndex = state.items.findIndex(\r\n//       (item) => item.id === action.id\r\n//     );\r\n//     const existingItem = state.item[exitingCartItemIndex];\r\n//     const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n//     let updatedItems;\r\n//     if (existingItem.amount === 1 ){\r\n//         updatedItems = state.items.filter(item => item.id !== action.id)\r\n//     }else {\r\n//         const updatedItem = {...existingItem, amount : existingItem.amount - 1};\r\n//         updatedItems = [...state.items];\r\n//         updatedItems[exitingCartItemIndex] = updatedItem;\r\n//     }\r\n//     return {\r\n//         items: updatedItems,\r\n//         totalAmount: updatedTotalAmount,\r\n//     }\r\n//   }\r\n//   return defaultCartState;\r\n// };\r\n\r\n// const CartProvider = (props) => {\r\n//   const [cartState, dispatchCartAction] = useReducer(\r\n//     cartRducer,\r\n//     defaultCartState\r\n//   );\r\n\r\n//   const addItemToCartHandler = (item) => {\r\n//     dispatchCartAction({ type: \"ADD\", item: item });\r\n//   };\r\n\r\n//   const removeItemFromCartHandler = (id) => {\r\n//     dispatchCartAction({ type: \"REMOVE\", id: id });\r\n//   };\r\n\r\n//   const cartContext = {\r\n//     items: cartState.items,\r\n//     totalAmount: cartState.totalAmount,\r\n//     addItem: addItemToCartHandler,\r\n//     removeItem: removeItemFromCartHandler,\r\n//   };\r\n\r\n//   return (\r\n//     <CartContext.Provider value={cartContext}>\r\n//       {props.children}\r\n//     </CartContext.Provider>\r\n//   );\r\n// };\r\n\r\n// export default CartProvider;\r\n\r\nimport { useReducer } from \"react\";\r\n\r\nimport CartContext from \"./cart-context\";\r\n\r\nconst defaultCartState = {\r\n  items: [],\r\n  totalAmount: 0,\r\n};\r\n\r\nconst cartReducer = (state, action) => {\r\n  if (action.type === \"ADD\") {\r\n    const updatedTotalAmount =\r\n      state.totalAmount + action.item.price * action.item.amount;\r\n\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.item.id\r\n    );\r\n    const existingCartItem = state.items[existingCartItemIndex];\r\n    let updatedItems;\r\n\r\n    if (existingCartItem) {\r\n      const updatedItem = {\r\n        ...existingCartItem,\r\n        amount: existingCartItem.amount + action.item.amount,\r\n      };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    } else {\r\n      updatedItems = state.items.concat(action.item);\r\n    }\r\n\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n  if (action.type === \"REMOVE\") {\r\n    const existingCartItemIndex = state.items.findIndex(\r\n      (item) => item.id === action.id\r\n    );\r\n    const existingItem = state.items[existingCartItemIndex];\r\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n    let updatedItems;\r\n    if (existingItem.amount === 1) {\r\n      updatedItems = state.items.filter((item) => item.id !== action.id);\r\n    } else {\r\n      const updatedItem = { ...existingItem, amount: existingItem.amount - 1 };\r\n      updatedItems = [...state.items];\r\n      updatedItems[existingCartItemIndex] = updatedItem;\r\n    }\r\n\r\n    return {\r\n      items: updatedItems,\r\n      totalAmount: updatedTotalAmount,\r\n    };\r\n  }\r\n\r\n  if (action.type === \"CLEAR\") {\r\n    return defaultCartState;\r\n  }\r\n\r\n  return defaultCartState;\r\n};\r\n\r\nconst CartProvider = (props) => {\r\n  const [cartState, dispatchCartAction] = useReducer(\r\n    cartReducer,\r\n    defaultCartState\r\n  );\r\n\r\n  const addItemToCartHandler = (item) => {\r\n    dispatchCartAction({ type: \"ADD\", item: item });\r\n  };\r\n\r\n  const removeItemFromCartHandler = (id) => {\r\n    dispatchCartAction({ type: \"REMOVE\", id: id });\r\n  };\r\n\r\n  const clearCartHandler = () => {\r\n    dispatchCartAction({ type: \"CLEAR\" });\r\n  };\r\n\r\n  const cartContext = {\r\n    items: cartState.items,\r\n    totalAmount: cartState.totalAmount,\r\n    addItem: addItemToCartHandler,\r\n    removeItem: removeItemFromCartHandler,\r\n    clearCart: clearCartHandler,\r\n  };\r\n\r\n  return (\r\n    <CartContext.Provider value={cartContext}>\r\n      {props.children}\r\n    </CartContext.Provider>\r\n  );\r\n};\r\n\r\nexport default CartProvider;\r\n"]},"metadata":{},"sourceType":"module"}